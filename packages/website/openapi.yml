openapi: "3.0.3"
info:
  title: Website API
  description: REST API documentation for the client-server website, covering users, events, gallery, polls, and more.
  version: "1.0"

tags:
  - name: Authentication
    description: Operations related to user sign-in and sign-up.
  - name: Events
  - name: Gallery
  - name: Polls
  - name: Schedule
    description: Operations related to schedule upload data.
  - name: Users
    description: User account management operations.
  - name: UserProfile
    description: Operations related to viewing and updating user profiles.

paths:
  # Authentication

  "/signIn":
    post:
      summary: Sign in for user
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInData"
      responses:
        "200":
          description: User signed in successfully.
          headers:
            Set-Cookie:
              description: Session cookie set by server.
              schema:
                type: string
                example: "sessionId=12345; Path=/; HttpOnly"
        "400":
          description: Bad request ( missing fields).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/signUp":
    post:
      summary: Sign up for user
      description:
        The user is not actually signed up after this. 
        An mail will be sent to given e-mail with a link that user should click in order to confirm that the one owns the email.
        This link will activate the account.
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpData"
      responses:
        "200":
          description: User signed up successfully.
          headers:
            Set-Cookie:
              description: Session cookie set by server.
              schema:
                type: string
        "400":
          description: Bad request (invalid body, passwords mismatch, etc.).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (User with this email already exists).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/signUp/finish":
    post:
      summary: Activates the account.
      description:
        /signUp call sents mail to the user with a token. 
        This token must be passed to this method to authenticate the request.
      tags: ["Authentication"]
      responses:
        "200":
          description: The account is activated
        "400":
          description: Invalid request (e.g, invalid or no token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (User with this email already exists).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Events

  "/events":
    get:
      summary: Gets short information about all events
      tags: ["Events"]
      responses:
        "200":
          description: OK - An array of short event information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventShort'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Adds new event
      description: The request must be authorized.
      tags: [ "Events" ]
      security:
        - cookieAuth: [ ]
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: '#/components/schemas/NewEventInput'
      responses:
        "201":
          description: Event Created Successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "400":
          description: Bad Request (Invalid data).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  "/events/{id}":
      get:
        summary: Get details of a specific event
        tags: [ "Events" ]
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: ID of the event to retrieve.
        responses:
          '200':
            description: Detailed information about the event.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Event'
          '404':
            description: Event not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      put:
        summary: Updates the event
        description: The request must be authorized.
        tags: [ "Events" ]
        security:
          - cookieAuth: [ ]
        parameters:
          - in: path
            name: id
            schema:
              type: string
            description: ID of the event to change
            required: true
        requestBody:
          required: true
          content:
            "multipart/form-data":
              schema:
                $ref: '#/components/schemas/UpdateEventInput'
        responses:
          "200":
            description: Event Updated Successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Event'
          "400":
            description: Bad Request (Invalid data).
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "401":
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "404":
            description: Event Not Found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      delete:
        summary: Deletes the event
        description: The request must be authorized.
        tags: [ "Events" ]
        security:
          - cookieAuth: [ ]
        parameters:
          - in: path
            name: id
            schema:
              type: string
            description: ID of the event to delete
            required: true
        responses:
          "204": # 204 No Content is standard for successful DELETE
            description: Event Deleted Successfully.
          "401":
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          "404":
            description: Event Not Found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  # Gallery

  "/gallery/{id}":
      get:
        summary: Get photo gallery
        tags: [ Gallery ]
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: ID of the gallery to retrieve.
        responses:
          '200':
            description: List of photos.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Image'
          '404':
            description: Gallery not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  # Mail

  /mail/confirmation:
      post:
        summary: Send confirmation letter
        tags: [ Mail ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required: [ email ]
                properties:
                  email:
                    type: string
                    format: email
                    example: new_user@example.com
        responses:
          '200':
            description: The letter was sent successfully.
          '400':
            description: Bad request (e.g., invalid email).
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '500':
            description: Internal Server Error (Failed to send mail).
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  # Polls

  /polls/{id}:
      get:
        summary: Get details of a specific poll
        description: Retrieves the question, options, and current results (if allowed) for a single poll.
        tags: [ Polls ]
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The ID of the poll to retrieve.
        responses:
          '200':
            description: Poll details.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Poll'
          '404':
            description: Poll not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        summary: Vote on a specific poll
        tags: [ Polls ]
        security:
          - cookieAuth: [ ]
        parameters:
          - in: path
            name: id
            schema:
              type: string
            required: true
            description: The ID of the poll to vote on.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollVoteInput'
        responses:
          '200':
            description: Vote recorded successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Poll' # Return updated poll
          '400':
            description: Bad request (e.g., invalid option ID, poll closed).
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '401':
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '403':
            description: Forbidden (e.g., user already voted).
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '404':
            description: Poll not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  # Schedule

  /schedule:
      get:
        summary: Get the schedule
        description: /schedule upload the current schedule for the first and second week,
          for all days (labs, lectures and practices) from http://roz.kpi.ua/
        tags: ["Schedule"]

        parameters:
          - in: query
            name: group
            required: false
            schema:
              type: string
            description: Filter schedule by group name (e.g., KM-23).
            example: "KM-23"
          - in: query
            name: date
            required: false
            schema:
              type: string
              format: date
            description: Get schedule for a specific date.
        responses:
          '200':
            description: Schedule data.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Schedule'
          '404':
            description: Schedule not found for the given criteria.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

  /schedule/groups:
    get:
      summary: Get a list of faculty groups
      description:
        Gets a list of available faculty groups relevant to the timetable system. 
        This information can be used, for example, to populate group selection drop-down lists when requesting specific academic timetables.
      tags: ["Schedule"]
      responses:
        '200':
          description: Successful response with a list of groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleGroup'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "An internal server error occurred."

  # Users
  /users:
    get:
      summary:  Get all users
      description: /users retrieves a paginated list of all registered users.
      tags: ["Users"]
      security:
        - SessionCookieAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/PageQuery'
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoWithRole'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'

  /users/personal:
      put:
        summary: Personal user update
        description:
          Allows an authenticated user to update their own personal information 
          stored, such as first name, last name, and patronymic.
        tags: ["UserProfile"]
        security:
          - SessionCookieAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPersonalInfoInput'
        responses:
          '200':
            $ref: '#/components/responses/SuccessEmpty'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

  /users/password:
      put:
        summary: Change the password for the authenticated user
        description:
          Allows an authenticated user to change the password of their account.
          The user must provide their current (old) password for verification along with the new desired password.
          Session authentication is required.
        tags: ["UserProfile"]
        security:
          - SessionCookieAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordPayload'
        responses:
          '200':
            $ref: '#/components/responses/SuccessEmpty'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            description: Authentication failed or old password invalid.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
                examples:
                  session:
                    value:
                      message: "Unauthorized"
                  oldPassword:
                    value:
                      message: "Old password is invalid"
                      code: "INVALID_OLD_PASSWORD"

  /users/logOut:
      post:
        summary: Log out the current user
        description:
          Terminates the current session of an authenticated user.
          This is typically achieved by disabling the session on the server and instructing
          the client to clear any session cookies or tokens.
        tags: ["Users"]
        responses:
          '200':
            description: Logout successful. The session cookie is cleared.
            headers:
              Set-Cookie:
                description: Clears the session cookie.
                schema:
                  type: string
                  example: "SESSION_ID_COOKIE=; Expires=Thu, 01 Jan 1970 00:00:00 GMT"

  /users/avatar:
      post:
        summary: Upload or update the avatar for the authenticated user
        description:
          Allows an authenticated user to upload a new avatar image or replace an existing one.
          Session authentication is required.
        tags: ["UserProfile"]
        security:
          - SessionCookieAuth: [ ]
        requestBody:
          required: true
          content:
            image/*:
              schema:
                type: string
                format: binary
                description: The image file to upload.
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: The image file to upload.
        responses:
          '200':
            $ref: '#/components/responses/SuccessEmpty'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

  /users/approveList:
      get:
        summary: Get a list of users awaiting approval.
        description: Requires at least GROUP_HEAD role. Admins see all, Group Heads see their group.
        tags: ["Users"]
        security:
          - SessionCookieAuth: [ ]
        responses:
          '200':
            description: A list of users needing approval.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserInfo'
          '401':
            $ref: '#/components/responses/UnauthorizedError'

  /users/{id}:
    summary: User operation
    description: Placeholder for standard GET, PUT, DELETE operations on a specific user by ID.

    parameters:
      - $ref: '#/components/parameters/UserIdPath'
    get:
      summary: Get user details by ID
      description:
        Retrieves detailed information about a specific user account,
        identified by its unique ID. 
        Session authentication is required.
      tags: ["Users"]
      security:
        - SessionCookieAuth: [ ]
      responses:
        '200':
          description: Detailed information about the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update user details by ID (Admin)
      description:
        Allows the administrator to update the details of any user account identified by a unique user ID. 
        This is a privileged operation that requires administrative rights and session authentication.
      tags: ["Users"]
      security:
        - SessionCookieAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete a user by ID (Admin)
      description:
        Allows an administrator to permanently delete a user account specified by a unique user ID. 
        This is a destructive and privileged operation that requires administrative rights and session authentication.
      tags: ["Users"]
      security:
        - SessionCookieAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SuccessEmpty'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{id}/role:
      post:
        summary: Update the role of a specific user
        description:
          Changes the role of a specific user account identified by its ID. 
          The ability to change roles and the scope of the assigned roles depends on the rights of the authenticated user.  
          Session authentication required.
        tags: ["Users"]
        security:
          - SessionCookieAuth: [ ]
        parameters:
          - $ref: '#/components/parameters/UserIdPath'
          - $ref: '#/components/parameters/RoleValueQuery'
        responses:
          '200':
            $ref: '#/components/responses/SuccessEmpty'
          '400':
            $ref: '#/components/responses/BadRequestError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

  /users/{id}/disapprove:
      post:
        summary: Disapprove a user
        description:
          Allows an authorised user (typically with the "GROUP_HEAD" role or higher) 
          to reject a user account that is in an unapproved state ("STUDENT_NON_APPROVED")
          on the client-server website. Session authentication is required, and the target user must be in
          a defined pre-authentication state.
        tags: ["Users"]
        security:
          - SessionCookieAuth: [ ]
        parameters:
          - $ref: '#/components/parameters/UserIdPath'
        responses:
          '200':
            $ref: '#/components/responses/SuccessEmpty'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
          '404':
            $ref: '#/components/responses/NotFoundError'

components:
    schemas:
      SignInInput:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
            example: user@example.com
          password:
            type: string
            format: password
            example: mySecurePassword123

      SignUpInput:
        type: object
        required:
          - surname
          - name
          - group
          - email
          - phone
          - password
          - confirmPassword
        properties:
          surname:
            type: string
            example: Council
          name:
            type: string
            example: Student
          secondname:
            type: string
            example: FAM
          group:
            type: string
            example: KM-23
          isGroupHead:
            type: boolean
            example: false
            description: Indicates if the user is the head of their group.
          email:
            type: string
            format: email
            example: user@example.com
          phone:
            type: string
            example: +380671234567
            pattern: '^\\+?[1-9]\\d{1,14}$'
          password:
            type: string
            format: password
            example: MySecurePassword123
          confirmPassword:
            type: string
            format: password
            example: MySecurePassword123

      EventShort:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: ID of an event
          title:
            type: string
            description: Title of an event
          date:
            type: string
            format: date-time
          status:
            type: string
            enum: [ "pending", "ended" ]

      Event:
          type: object
          properties:
            id:
              type: string
              format: uuid
            title:
              type: string
            description:
              type: string
            date:
              type: string
              format: date-time
            status:
              type: string
              enum: [ "pending", "ended" ]
            imageUrl:
              type: string
              format: uri
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

      NewEventInput:
          type: object
          required: [ title ]
          properties:
            title:
              type: string
              description: Title of the event
            description:
              type: string
              description: Description of the event
            date:
              type: string
              format: date-time
              description: Date of the event
            status:
              type: string
              enum: [ "pending", "ended" ]
              description: Status of the event (defaults to 'pending' usually)
              default: "pending"
            image:
              type: string
              format: binary
              description: Image of the event.

      UpdateEventInput:
          type: object
          properties:
            title:
              type: string
              description: New title of the event
            description:
              type: string
              description: New description of the event
            date:
              type: string
              format: date-time
              description: New date of the event
            status:
              type: string
              enum: [ "pending", "ended" ]
              description: New status of the event
            image:
              type: string
              format: binary
              description: New image of the event (optional).

      Image:
        type: object
        properties:
          id:
            type: string
            format: uuid
          url:
            type: string
            format: uri
          caption:
            type: string

      Poll:
        type: object
        properties:
          id:
            type: string
            format: uuid
          question:
            type: string
          options:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                text:
                  type: string
                votes:
                  type: integer
          isOpen:
            type: boolean
          endDate:
            type: string
            format: date-time

      PollVoteInput:
        type: object
        required: [ optionId ]
        properties:
          optionId:
            type: string
            description: The ID of the poll option being voted for.
            example: "opt_a7b4c9"

      Schedule:
        type: object
        properties:
          group:
            type: string
          date:
            type: string
            format: date
          lessons:
            type: array
            items:
              type: object
              properties:
                startTime:
                  type: string
                  format: time
                  example: "08:30:00"
                endTime:
                  type: string
                  format: time
                  example: "10:25:00"
                subject:
                  type: string
                type:
                  type: string
                  enum: [Lecture, Practice, Lab]
                teacher:
                  type: string
                location:
                  type: string

      ScheduleGroup:
        type: object
        properties:
          campusId:
            type: string
            example: "a1b2c3d4"
          name:
            type: string
            example: "КМ-23"

      Error:
        type: object
        required: [ message ]
        properties:
          code:
            type: string
            description: An internal error code.
            example: "INVALID_INPUT"
          message:
            type: string
            description: A human-readable error message.
            example: "Password and confirmation must match."
          details:
            type: object
            description: Additional details about the error.
            additionalProperties: true

      SignInData:
        type: object
        required: [ message ]
        properties:
          code:
            type: string
            description: An internal error code.
            example: "INVALID_INPUT"

      SignUpData:
        type: object
        required: [ message ]
        properties:
          code:
            type: string
            description: An internal error code.
            example: "INVALID_INPUT"

      UserRole:
        type: string
        description: Role of the user within the system.
        enum:
          - 0 # for example: admin
          - 1 # for example: head_of_group
          - 2 # for example: student
        example: 1

      ApiErrorCode:
        type: string
        description: Specific error codes for certain API failures.
        enum:
          - INVALID_OLD_PASSWORD
        example: INVALID_OLD_PASSWORD

      UserInfoWithRole:
        type: object
        properties:
          id:
            type: string
            description: Unique identifier of the user.
            example: "60d0fe4f5311236168a109ca"
          name:
            type: string
            description: Full name of the user.
            example: "Іванов Іван Романович"
          email:
            type: string
            format: email
            description: Email address of the user.
            example: "km23.pma@example.com"
          group:
            type: string
            nullable: true
            description: Academic group of the user.
            example: "КМ-23"
          role:
            $ref: '#/components/schemas/UserRole'
          hasAvatar:
            type: boolean
            description: Indicates if the user has an avatar.
            example: true

      UserInfo:
        type: object
        properties:
          id:
            type: string
            description: Unique identifier of the user.
            example: "60d0fe4f5311236168a109cb"
          name:
            type: string
            description: Full name of the user.
            example: "Петренко Роман Олегович"
          email:
            type: string
            format: email
            description: Email address of the user.
            example: "sc.fam@example.com"
          group:
            type: string
            nullable: true
            description: Academic group of the user.
            example: "КМ-21"
          hasAvatar:
            type: boolean
            description: Indicates if the user has an avatar.
            example: false

      UserPersonalInfoInput:
        type: object
        description: Payload for updating user's personal information.
        properties:
          firstName:
            type: string
            example: "Валерія"
          lastName:
            type: string
            example: "Баранівська"
          parentName:
            type: string
            nullable: true
            example: "Олександрівна"
        required:
          - firstName
          - lastName

      ChangePasswordPayload:
        type: object
        description: Payload for changing user's password.
        properties:
          oldPassword:
            type: string
            format: password
            description: The current password of the user.
            example: "12345678"
          newPassword:
            type: string
            format: password
            description: The new desired password.
            example: "12345678"
        required:
          - oldPassword
          - newPassword

      ErrorResponse:
        type: object
        properties:
          message:
            type: string
            description: A human-readable description of the error.
            example: "Invalid old password"
          code:
            oneOf:
              - $ref: '#/components/schemas/ApiErrorCode'
              - type: string
            description: A machine-readable error code, if applicable.
            example: "INVALID_OLD_PASSWORD"
          details:
            type: object
            additionalProperties: true
            nullable: true

      User:
        allOf:
          - $ref: '#/components/schemas/UserInfoWithRole'
          - type: object
            properties:
              dateOfBirth:
                type: string
                format: date
                nullable: true
              address:
                type: string
                nullable: true
    securitySchemes:
      cookieAuth:
        type: apiKey
        in: cookie
        name: sessionId

    parameters:
      UserIdPath:
        name: id
        in: path
        required: true
        description: Unique identifier of the user.
        schema:
          type: string
          example: "60d0fe4f5311236168a109ca"

      PageQuery:
        name: page
        in: query
        required: true
        description: Page number for pagination.
        schema:
          type: integer
          minimum: 1
          example: 1

      RoleValueQuery:
        name: value
        in: query
        required: true
        description: The new role to assign to the user.
        schema:
          $ref: '#/components/schemas/UserRole'

    responses:
      UnauthorizedError:
        description: Authentication failed or insufficient permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
            examples:
              sessionMissing:
                summary: Session ID missing or invalid
                value:
                  message: "Unauthorized"
              permissionDenied:
                summary: Insufficient permissions
                value:
                  message: "Access denied due to insufficient role."

      BadRequestError:
        description: The request was malformed or contained invalid data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Invalid page parameter"

      NotFoundError:
        description: The requested resource was not found.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
            example:
              message: "Resource not found."

      SuccessEmpty:
        description: Operation successful, no content returned in body.
