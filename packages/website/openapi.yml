openapi: "3.0.3"
info:
  title: Website API
  description: REST API documentation for the client-server website, covering users, events, gallery, polls, and more.
  version: "1.0"

tags:
  - name: Authentication
    description: Operations related to user sign-in and sign-up.
  - name: Events
  - name: Gallery
  - name: Polls
  - name: Schedule
    description: Operations related to schedule upload data.
  - name: Users
    description: User account management operations.
  - name: UserProfile
    description: Operations related to viewing and updating user profiles.

paths:
  # Authentication

  "/signIn":
    post:
      summary: Sign in for user
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInData"
      responses:
        "200":
          description: User signed in successfully.
          headers:
            Set-Cookie:
              description: Session cookie set by server.
              schema:
                type: string
                example: "sessionId=12345; Path=/; HttpOnly"
        "400":
          description: Bad request ( missing fields).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/signUp":
    post:
      summary: Sign up for user
      description: The user is not actually signed up after this.
        An mail will be sent to given e-mail with a link that user should click in order to confirm that the one owns the email.
        This link will activate the account.
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpData"
      responses:
        "200":
          description: User signed up successfully.
          headers:
            Set-Cookie:
              description: Session cookie set by server.
              schema:
                type: string
        "400":
          description: Bad request (invalid body, passwords mismatch, etc.).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (User with this email already exists).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/signUp/finish":
    post:
      summary: Activates the account.
      description: /signUp call sents mail to the user with a token.
        This token must be passed to this method to authenticate the request.
      tags: ["Authentication"]
      responses:
        "200":
          description: The account is activated
        "400":
          description: Invalid request (e.g, invalid or no token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (User with this email already exists).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Events

  "/events":
    get:
      summary: Gets short information about all events
      tags: ["Events"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShortEvent"

    post:
      summary: Adds new event
      description: The request must be authenticated.
      tags: ["Events"]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/AddEventPayload"
      responses:
        "200":
          description: Event created.

        "400":
          description: Bad Request (Invalid data).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/events/{id}":
    put:
      summary: Updates the event
      description: The request must be authorized.
      tags: ["Events"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the event to change
          required: true
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditEventPayload"
      responses:
        "200":
          description: Event updated auccessfully.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Deletes the event
      description: The request must be authorized.
      tags: ["Events"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the event to delete
          required: true
      responses:
        "200":
          description: Event deleted successfully.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Event Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Gallery

  "/gallery":
    get:
      summary: Get a page of gallery images
      tags: [Gallery]
      parameters:
        - in: query
          name: page
          required: true
          description: The number of the page to query.
            The page is 1-based and should be only integer.
          schema:
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GalleryPageItem"
    post:
      summary: Adds a new gallery images
      tags: [Gallery]
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  format: uuid
                  description: ID of the event these images relate to
                date:
                  type: string
                  format: date-time
                  description: When the images were taken.
                files:
                  type: string
                  format: binary
                  description: An array of images
      responses:
        "200":
          description: Images added.
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/gallery/{id}":
    get:
      summary: Get detailed information about a gallery photo
      tags: [Gallery]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the photo to retrieve.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GalleryImageWithEvent"
        "404":
          description: Given photo not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes the image
      description: The request must be authorized.
      tags: ["Gallery"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the image to delete
          required: true
      responses:
        "200":
          description: Image deleted successfully.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Image not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Polls

  /polls:
    post:
      summary: Adds a new poll
      description: The request must be authorized.
      tags: ["Polls"]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPollPayload"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /polls/{id}:
    post:
      summary: Vote on a specific poll
      description: The request must be authorized.
      tags: ["Polls"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the poll to vote on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitPollPayload"
      responses:
        "200":
          description: Vote recorded successfully.
        "400":
          description: Bad request (e.g., poll closed).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Poll not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /polls/{id}/close:
    post:
      summary: Closes the poll
      description: The request must be authenticated
      tags: [Polls]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the poll to close
          required: true
      responses:
        "200":
          description: Poll closed.
        "404":
          description: Poll not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /polls/{id}/table:
    get:
      summary: Get answers of the poll formatted as a table.
      description: The request must be authenticated
      tags: [Polls]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the poll to close
          required: true
      responses:
        "200":
          description: Poll closed.
        "404":
          description: Poll not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Schedule

  /schedule:
    get:
      summary: Get the schedule for a specified group
      description: The data is retrieved from http://roz.kpi.ua/
      tags: ["Schedule"]

      parameters:
        - in: query
          name: group
          required: false
          schema:
            type: string
          description: A ID of the group to get schedule for.
          example: "KM-23"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        "404":
          description: The specified group not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /schedule/groups:
    get:
      summary: Get a list of faculty groups
      description:
        Gets a list of available faculty groups relevant to the timetable system.
        This information can be used, for example, to populate group selection drop-down lists when requesting specific academic timetables.
      tags: ["Schedule"]
      responses:
        "200":
          description: Successful response with a list of groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScheduleGroup"

  # Users

  /users:
    get:
      summary: Get all users
      description: /users retrieves a paginated list of all registered users.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/PageQuery"
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserInfoWithRole"
        "400":
          description: Invalid page.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/personal:
    put:
      summary: Update personal user info
      description:
        Allows an authenticated user to update their own personal information
        stored, such as first name, last name.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPersonalInfoInput"

      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/password:
    put:
      summary: Change the password for the authenticated user
      description:
        Allows an authenticated user to change the password of their account.
        The user must provide their current (old) password for verification along with the new desired password.
        Session authentication is required.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordPayload"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          description: Authentication failed or old password invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/logOut:
    post:
      summary: Log out the current user
      description: Terminates the current session of an authenticated user.
      tags: ["Users"]
      responses:
        "200":
          description: Logout successful. The session cookie is cleared.
          headers:
            Set-Cookie:
              description: Clears the session cookie.
              schema:
                type: string
                example: "SESSION_ID_COOKIE=; Expires=Thu, 01 Jan 1970 00:00:00 GMT"

  /users/avatar:
    post:
      summary: Update the avatar for the authenticated user
      description:
        Allows an authenticated user to upload a new avatar image or replace an existing one.
        Session authentication is required.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
              description: The image file to upload.

      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/approveList:
    get:
      summary: Get a list of users awaiting approval.
      description: Requires at least GROUP_HEAD role. Admins see all, Group Heads see their group.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      responses:
        "200":
          description: A list of users needing approval.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserInfo"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /users/{id}:
    summary: User operation
    description: Placeholder for standard GET, PUT, DELETE operations on a specific user by ID.

    parameters:
      - $ref: "#/components/parameters/UserIdPath"
    get:
      summary: Get user details by ID
      description: 
        Retrieves detailed information about a specific user account, identified by its unique ID.
        Session authentication is required.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      responses:
        "200":
          description: Detailed information about the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      summary: Update user details by ID (Admin)
      description:
        Allows the administrator to update the details of any user account identified by a unique user ID.
        This is a privileged operation that requires administrative rights and session authentication.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: Delete a user by ID (Admin)
      description:
        Allows an administrator to permanently delete a user account specified by a unique user ID.
        This is a destructive and privileged operation that requires administrative rights and session authentication.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/role:
    post:
      summary: Update the role of a specific user
      description:
        Changes the role of a specific user account identified by its ID.
        Session authentication required.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
        - $ref: "#/components/parameters/RoleValueQuery"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/disapprove:
    post:
      summary: Disapprove a user
      description:
        Allows an authorised user (typically with the "GROUP_HEAD" role or higher)
        to reject a user account that is in an unapproved state ("STUDENT_NON_APPROVED")
        on the client-server website. Session authentication is required, and the target user must be in
        a defined pre-authentication state.
      tags: ["Users"]
      security:
        - SessionCookieAuth: []
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

components:
  schemas:
    # Authentication

    SignInData:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: mySecurePassword123

    SignUpData:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        parentName:
          type: string

        academicGroup:
          type: string
          example: KM-23

        email:
          type: string
          format: email
          example: user@example.com

        password:
          type: string
          format: password
          example: MySecurePassword123

    # Events

    ShortEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of an event
        title:
          type: string
          description: Title of an event
        date:
          type: string
          format: date-time
        status:
          type: string
          enum: ["pending", "ended"]

    AddEventPayload:
      type: object
      properties:
        title:
          type: string
          description: Title of the event
        description:
          type: string
          description: Description of the event
        date:
          type: string
          format: date-time
          description: Date of the event
        status:
          type: string
          enum: ["pending", "ended"]
          description: Status of the event (defaults to 'pending' usually)
          default: "pending"
        image:
          type: string
          format: binary
          description: Image of the event.

    EditEventPayload:
      type: object
      properties:
        title:
          type: string
          description: New title of the event
        description:
          type: string
          description: New description of the event
        date:
          type: string
          format: date-time
          description: New date of the event
        status:
          type: string
          enum: ["pending", "ended"]
          description: New status of the event
        image:
          type: string
          format: binary
          description: New image of the event (optional).

    # Gallery

    GalleryPageItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        width:
          type: number
          format: integer
          example: 123
        height:
          type: number
          format: integer
          example: 321

    GalleryImageWithEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        event:
          type: object
          properties:
            id:
              type: string
            title:
              type: string

    # Polls

    SubmitPollPayload:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: An answer to a text question.
              status:
                type: boolean
                description: An answer to a checkbox question.
              selectedIndex:
                type: number
                description: An answer to a single option question.
              selectedIndices:
                type: array
                description: An answer to a multi option question.
                items:
                  type: number

    AddPollPayload:
      type: object
      properties:
        title:
          type: string
          description: Title of the poll. Must be at least one character long.
        questions:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - text
                  - radio
                  - multicheckbox
                  - checkbox
              title:
                type: string
              options:
                type: array
                description: Options to select. It's required if the type is radio or multicheckbox.
                items:
                  type: object
                  properties:
                    title:
                      type: string
              requiredTrue:
                type: boolean
                description: Determines whether the checkbox should always be checked.

    # Schedule

    Schedule:
      type: object
      properties:
        groupCampusId:
          type: string
        weeks:
          type: array
          description: The schedule is to 2-week recurring. The array always has two items that respesent each week.
          items:
            type: object
            properties:
              day:
                type: number
                description: Number of the day, 1-based
              lessons:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: ["lec", "lab", "prac"]
                      description: Type of the lesson
                    name:
                      type: string
                      description: Name of the lesson
                      example: "Front-end розробка"
                    teacher:
                      type: object
                      description: The teacher who conducts the lesson
                      required: ["name"]
                      properties:
                        name:
                          type: string
                          description: Name of the teacher
                          example: "Тавров Данило Юрійович"
                        link:
                          type: string
                          description: Link to the teacher's profile. It can be either pma.fpm.kpi.ua or intellect.kpi.ua
                    time:
                      type: string
                      description: When the lesson is conducted. Lessons are always conducted at specific points in time (breakpoints)
                      enum:
                        [
                          "8:30",
                          "10:25",
                          "12:20",
                          "14:15",
                          "16:10",
                          "18:30",
                          "20:20",
                        ]
                    place:
                      type: string
                      description: Where the lesson is conducted. Might be empty string if the lesson is online.
                    link:
                      type: string
                      description: Link to call where the lesson is conducted, for example Zoom.

    ScheduleGroup:
      type: object
      properties:
        campusId:
          type: string
          example: "a1b2c3d4"
        name:
          type: string
          example: "КМ-23"

    # Users

    UserRole:
      type: number
      enum:
        - -1 # STUDENT_NON_APPROVED
        - 0 # STUDENT
        - 1 # GROUP_HEAD
        - 2 # ADMIN
      example: 1

    UserInfoWithRole:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user.
          example: "60d0fe4f5311236168a109ca"
        name:
          type: string
          description: Full name of the user.
          example: "Іванов Іван Романович"
        email:
          type: string
          format: email
          description: Email address of the user.
          example: "km23.pma@example.com"
        group:
          type: string
          nullable: true
          description: ID of academic group of the user.
        role:
          $ref: "#/components/schemas/UserRole"
        hasAvatar:
          type: boolean
          description: Indicates if the user has an avatar.
          example: true

    UserInfo:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user.
          example: "60d0fe4f5311236168a109cb"
        name:
          type: string
          description: Full name of the user.
          example: "Петренко Роман Олегович"
        email:
          type: string
          format: email
          description: Email address of the user.
          example: "sc.fam@example.com"
        group:
          type: string
          nullable: true
          description: ID of academic group of the user.
        hasAvatar:
          type: boolean
          description: Indicates if the user has an avatar.
          example: false

    UserPersonalInfoInput:
      type: object
      description: Payload for updating user's personal information.
      properties:
        firstName:
          type: string
          example: "Валерія"
        lastName:
          type: string
          example: "Баранівська"
        parentName:
          type: string
          nullable: true
          example: "Олександрівна"
      required:
        - firstName
        - lastName

    ChangePasswordPayload:
      type: object
      description: Payload for changing user's password.
      properties:
        oldPassword:
          type: string
          format: password
          description: The current password of the user.
          example: "12345678"
        newPassword:
          type: string
          format: password
          description: The new desired password.
          example: "12345678"
      required:
        - oldPassword
        - newPassword

    User:
      allOf:
        - $ref: "#/components/schemas/UserInfoWithRole"
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              nullable: true
            address:
              type: string
              nullable: true

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
          description: A human-readable description of the error.
          example: "Invalid old password"
        code:
          oneOf:
            - $ref: "#/components/schemas/ApiErrorCode"
          description: A machine-readable error code, if applicable.

    ApiErrorCode:
      type: number
      description: Specific error codes for API failures.
      enum:
        - 1 # INVALID_OLD_PASSWORD
        - 2 # POLL_CLOSED

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId

  parameters:
    UserIdPath:
      name: id
      in: path
      required: true
      description: Unique identifier of the user.
      schema:
        type: string
        example: "60d0fe4f5311236168a109ca"

    PageQuery:
      name: page
      in: query
      required: true
      description: Page number for pagination.
      schema:
        type: integer
        minimum: 1
        example: 1

    RoleValueQuery:
      name: value
      in: query
      required: true
      description: The new role to assign to the user.
      schema:
        $ref: "#/components/schemas/UserRole"

  responses:
    UnauthorizedError:
      description: Authentication failed or insufficient permissions.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    BadRequestError:
      description: The request was malformed or contained invalid data.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: "Invalid page parameter"

    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: "Resource not found."
