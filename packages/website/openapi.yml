openapi: "3.0.3"
info:
  title: Website API
  description: REST API documentation for the client-server website, covering users, events, gallery, polls, and more.
  version: "1.0"

tags:
  - name: Authentication
    description: Operations related to user sign-in and sign-up.
  - name: Events
  - name: Gallery
  - name: Polls
  - name: Schedule

paths:
  # Authentication

  "/signIn":
    post:
      summary: Sign in for user
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInData"
      responses:
        "200":
          description: User signed in successfully.
          headers:
            Set-Cookie:
              description: Session cookie set by server.
              schema:
                type: string
                example: "sessionId=12345; Path=/; HttpOnly"
        "400":
          description: Bad request ( missing fields).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/signUp":
    post:
      summary: Sign up for user
      description:
        The user is not actually signed up after this. 
        An mail will be sent to given e-mail with a link that user should click in order to confirm that the one owns the email.
        This link will activate the account.
      tags: ["Authentication"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpData"
      responses:
        "200":
          description: User signed up successfully.
          headers:
            Set-Cookie:
              description: Session cookie set by server.
              schema:
                type: string
        "400":
          description: Bad request (invalid body, passwords mismatch, etc.).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (User with this email already exists).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/signUp/finish":
    post:
      summary: Activates the account.
      description:
        /signUp call sents mail to the user with a token. 
        This token must be passed to this method to authenticate the request.
      tags: ["Authentication"]
      responses:
        "200":
          description: The account is activated
        "400":
          description: Invalid request (e.g, invalid or no token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (User with this email already exists).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Events

  "/events":
    get:
      summary: Gets short information about all events
      tags: ["Events"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShortEvent"

    post:
      summary: Adds new event
      description: The request must be authenticated.
      tags: ["Events"]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/AddEventPayload"
      responses:
        "200":
          description: Event created.

        "400":
          description: Bad Request (Invalid data).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/events/{id}":
    put:
      summary: Updates the event
      description: The request must be authorized.
      tags: ["Events"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the event to change
          required: true
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditEventPayload"
      responses:
        "200":
          description: Event updated auccessfully.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Deletes the event
      description: The request must be authorized.
      tags: ["Events"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the event to delete
          required: true
      responses:
        "200":
          description: Event deleted successfully.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Event Not Found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Gallery

  "/gallery":
    get:
      summary: Get a page of gallery images
      tags: [Gallery]
      parameters:
        - in: query
          name: page
          required: true
          description: 
            The number of the page to query. 
            The page is 1-based and should be only integer. 
          schema:
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
             schema:
               type: array
               items:
                $ref: "#/components/schemas/GalleryPageItem"

  "/gallery":
    post:
      summary: Adds a new gallery images
      tags: [Gallery]
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  format: uuid
                  description: ID of the event these images relate to
                date:
                  type: string
                  required: true
                  format: date-time
                  description: When the images were taken.
                files:
                  type: string
                  format: binary
                  description: An array of images
      responses:
        "200":
          description: Images added.
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/gallery/{id}":
    get:
      summary: Get detailed information about a gallery photo
      tags: [Gallery]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the photo to retrieve.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GalleryImageWithEvent"
        "404":
          description: Given photo not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes the image
      description: The request must be authorized.
      tags: ["Gallery"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the image to delete
          required: true
      responses:
        "200":
          description: Image deleted successfully.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Image not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Polls

  /polls:
    post:
      summary: Adds a new poll
      description: The request must be authorized.
      tags: ["Polls"]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
             schema:
               $ref: "#/components/schemas/AddPollPayload"
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /polls/{id}:
    post:
      summary: Vote on a specific poll
      description: The request must be authorized.
      tags: ["Polls"]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the poll to vote on.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitPollPayload"
      responses:
        "200":
          description: Vote recorded successfully.
        "400":
          description: Bad request (e.g., poll closed).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Poll not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /polls/{id}/close:
    post:
      summary: Closes the poll
      description: The request must be authenticated
      tags: [Polls]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the poll to close
          required: true
      responses:
        "200":
          description: Poll closed.
        "404":
          description: Poll not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /polls/{id}/table:
    get:
      summary: Get answers of the poll formatted as a table.
      description: The request must be authenticated
      tags: [Polls]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the poll to close
          required: true
      responses:
        "200":
          description: Poll closed.
        "404":
          description: Poll not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Schedule
  
  /schedule:
    get:
      summary: Get the schedule
      tags: [Schedule]
      parameters:
        - in: query
          name: group
          required: false
          schema:
            type: string
          description: Group to get schedule of (e.g., KM-23).
          example: "KM-23"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        "400":
          description: Bad request (e.g., no group parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        "404":
          description: The group not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    SignInData:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: mySecurePassword123

    SignUpData:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        parentName:
          type: string

        academicGroup:
          type: string
          example: KM-23
          
        email:
          type: string
          format: email
          example: user@example.com

        telnum:
          type: string
          example: +380671234567
          pattern: '^\\+?[1-9]\\d{1,14}$'

        password:
          type: string
          format: password
          example: MySecurePassword123

    ShortEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of an event
        title:
          type: string
          description: Title of an event
        date:
          type: string
          format: date-time
        status:
          type: string
          enum: ["pending", "ended"]

    AddEventPayload:
      type: object
      properties:
        title:
          type: string
          description: Title of the event
        description:
          type: string
          description: Description of the event
        date:
          type: string
          format: date-time
          description: Date of the event
        status:
          type: string
          enum: ["pending", "ended"]
          description: Status of the event (defaults to 'pending' usually)
          default: "pending"
        image:
          type: string
          format: binary
          description: Image of the event.

    EditEventPayload:
      type: object
      properties:
        title:
          type: string
          description: New title of the event
        description:
          type: string
          description: New description of the event
        date:
          type: string
          format: date-time
          description: New date of the event
        status:
          type: string
          enum: ["pending", "ended"]
          description: New status of the event
        image:
          type: string
          format: binary
          description: New image of the event (optional).

    GalleryPageItem:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        width:
          type: number
          format: integer
          example: 123
        height:
          type: number
          format: integer,
          example: 321

    GalleryImageWithEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        event:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
          
    SubmitPollPayload:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: An answer to a text question.
              status:
                type: boolean
                description: An answer to a checkbox question.
              selectedIndex:
                type: number
                description: An answer to a single option question.
              selectedIndices:
                type: array
                description: An answer to a multi option question.
                items:
                  type: number
    
    AddPollPayload:
      type: object
      properties:
        title:
          type: string
          description: Title of the poll. Must be at least one character long.
        questions:
          type: array
          items:
            type: object
            properties:
              type: 
                type: string
                enum:
                  - text
                  - radio
                  - multicheckbox
                  - checkbox
              title: 
                type: string
              options:
                type: array
                description: Options to select. It's required if the type is radio or multicheckbox.
                items:
                  type: object
                  properties:
                    title:
                      type: string
              requiredTrue:
                type: boolean
                description: Determines whether the checkbox should always be checked.

    Error:
      type: object
      required: [message]
      properties:
        code:
          type: number
          description: An internal error code.
        message:
          type: string
          description: A human-readable error message.
          example: "Password and confirmation must match."

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId
